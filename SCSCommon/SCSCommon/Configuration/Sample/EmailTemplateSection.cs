//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


//<emailTemplateSecion xmlns = "SCSCommon.Configuration" >
//    < setting  address="127.0.0.1" enableSSL="false" isAsyn="false" isMailEnable="true" password="123456" timeout="60" userName="asjk">
//    </setting>
//    <emailTemplates>
//      <template content = "111" footer="999" name="1" title=""></template>
//      <template content = "222" footer="88" name="2" title=""></template>
//    <template content = "333" footer="88" name="3" title=""></template>
//    <template content = "444" footer="888" name="4" title=""></template> 
//    </emailTemplates>
//	</emailTemplateSecion>
using System;

namespace SCSCommon.Configuration
{


    /// <summary>
    /// A collection of Template instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SCSCommon.Configuration.Template), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = global::SCSCommon.Configuration.EmailTemplates.TemplatePropertyName)]
    [Serializable]
    public partial class EmailTemplates : global::System.Configuration.ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SCSCommon.Configuration.Template"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string TemplatePropertyName = "template";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override string ElementName
        {
            get
            {
                return global::SCSCommon.Configuration.EmailTemplates.TemplatePropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SCSCommon.Configuration.EmailTemplates.TemplatePropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SCSCommon.Configuration.Template)(element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="global::SCSCommon.Configuration.Template"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SCSCommon.Configuration.Template"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SCSCommon.Configuration.Template();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.Template"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SCSCommon.Configuration.Template"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.Template this[int index]
        {
            get
            {
                return ((global::SCSCommon.Configuration.Template)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.Template"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SCSCommon.Configuration.Template"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.Template this[object name]
        {
            get
            {
                return ((global::SCSCommon.Configuration.Template)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SCSCommon.Configuration.Template"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="template">The <see cref="global::SCSCommon.Configuration.Template"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Add(global::SCSCommon.Configuration.Template template)
        {
            base.BaseAdd(template);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SCSCommon.Configuration.Template"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="template">The <see cref="global::SCSCommon.Configuration.Template"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Remove(global::SCSCommon.Configuration.Template template)
        {
            base.BaseRemove(this.GetElementKey(template));
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.Template"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SCSCommon.Configuration.Template"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.Template GetItemAt(int index)
        {
            return ((global::SCSCommon.Configuration.Template)(base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.Template"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SCSCommon.Configuration.Template"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.Template GetItemByKey(string name)
        {
            return ((global::SCSCommon.Configuration.Template)(base.BaseGet(((object)(name)))));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SCSCommon.Configuration
{


    /// <summary>
    /// The Template Configuration Element.
    /// </summary>
    /// 
    [Serializable]
    public partial class Template : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string NamePropertyName = "name";

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Template.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Template.NamePropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Template.NamePropertyName] = value;
            }
        }
        #endregion

        #region Title Property
        /// <summary>
        /// The XML name of the <see cref="Title"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string TitlePropertyName = "title";

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Title.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Template.TitlePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Title
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Template.TitlePropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Template.TitlePropertyName] = value;
            }
        }
        #endregion

        #region Content Property
        /// <summary>
        /// The XML name of the <see cref="Content"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ContentPropertyName = "content";

        /// <summary>
        /// Gets or sets the Content.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Content.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Template.ContentPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Content
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Template.ContentPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Template.ContentPropertyName] = value;
            }
        }
        #endregion

        #region Footer Property
        /// <summary>
        /// The XML name of the <see cref="Footer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string FooterPropertyName = "footer";

        /// <summary>
        /// Gets or sets the Footer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Footer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Template.FooterPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Footer
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Template.FooterPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Template.FooterPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SCSCommon.Configuration
{


    /// <summary>
    /// The Setting Configuration Element.
    [Serializable]
    public partial class Setting : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Address Property
        /// <summary>
        /// The XML name of the <see cref="Address"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string AddressPropertyName = "address";

        /// <summary>
        /// Gets or sets the Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Address.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.AddressPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Address
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Setting.AddressPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.AddressPropertyName] = value;
            }
        }
        #endregion

        #region UserName Property
        /// <summary>
        /// The XML name of the <see cref="UserName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string UserNamePropertyName = "userName";

        /// <summary>
        /// Gets or sets the UserName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The UserName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.UserNamePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string UserName
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Setting.UserNamePropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.UserNamePropertyName] = value;
            }
        }
        #endregion

        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string PasswordPropertyName = "password";

        /// <summary>
        /// Gets or sets the Password.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Password.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.PasswordPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.Setting.PasswordPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.PasswordPropertyName] = value;
            }
        }
        #endregion

        #region IsMailEnable Property
        /// <summary>
        /// The XML name of the <see cref="IsMailEnable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string IsMailEnablePropertyName = "isMailEnable";

        /// <summary>
        /// Gets or sets the IsMailEnable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The IsMailEnable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.IsMailEnablePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
        public virtual bool IsMailEnable
        {
            get
            {
                return ((bool)(base[global::SCSCommon.Configuration.Setting.IsMailEnablePropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.IsMailEnablePropertyName] = value;
            }
        }
        #endregion

        #region IsAsyn Property
        /// <summary>
        /// The XML name of the <see cref="IsAsyn"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string IsAsynPropertyName = "isAsyn";

        /// <summary>
        /// Gets or sets the IsAsyn.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The IsAsyn.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.IsAsynPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
        public virtual bool IsAsyn
        {
            get
            {
                return ((bool)(base[global::SCSCommon.Configuration.Setting.IsAsynPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.IsAsynPropertyName] = value;
            }
        }
        #endregion

        #region EnableSSL Property
        /// <summary>
        /// The XML name of the <see cref="EnableSSL"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string EnableSSLPropertyName = "enableSSL";

        /// <summary>
        /// Gets or sets the EnableSSL.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableSSL.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.EnableSSLPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = false)]
        public virtual bool EnableSSL
        {
            get
            {
                return ((bool)(base[global::SCSCommon.Configuration.Setting.EnableSSLPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.EnableSSLPropertyName] = value;
            }
        }
        #endregion

        #region Timeout Property
        /// <summary>
        /// The XML name of the <see cref="Timeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string TimeoutPropertyName = "timeout";

        /// <summary>
        /// Gets or sets the Timeout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Timeout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.Setting.TimeoutPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = 60)]
        public virtual int Timeout
        {
            get
            {
                return ((int)(base[global::SCSCommon.Configuration.Setting.TimeoutPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.Setting.TimeoutPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SCSCommon.Configuration
{


    /// <summary>
    /// The EmailTemplateSecion Configuration Section.
    /// </summary>
    [Serializable]
    public partial class EmailTemplateSecion : global::System.Configuration.ConfigurationSection
    {

        #region Singleton Instance
        /// <summary>
        /// The XML name of the EmailTemplateSecion Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string EmailTemplateSecionSectionName = "emailTemplateSecion";

        /// <summary>
        /// The XML path of the EmailTemplateSecion Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string EmailTemplateSecionSectionPath = "emailTemplateSecion";

        /// <summary>
        /// Gets the EmailTemplateSecion instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public static global::SCSCommon.Configuration.EmailTemplateSecion Instance
        {
            get
            {
                return ((global::SCSCommon.Configuration.EmailTemplateSecion)(global::System.Configuration.ConfigurationManager.GetSection(global::SCSCommon.Configuration.EmailTemplateSecion.EmailTemplateSecionSectionPath)));
            }
        }
        #endregion

        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.EmailTemplateSecion.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.EmailTemplateSecion.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region EmailTemplates Property
        /// <summary>
        /// The XML name of the <see cref="EmailTemplates"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string EmailTemplatesPropertyName = "emailTemplates";

        /// <summary>
        /// Gets or sets the EmailTemplates.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The EmailTemplates.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.EmailTemplateSecion.EmailTemplatesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::SCSCommon.Configuration.EmailTemplates EmailTemplates
        {
            get
            {
                return ((global::SCSCommon.Configuration.EmailTemplates)(base[global::SCSCommon.Configuration.EmailTemplateSecion.EmailTemplatesPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.EmailTemplateSecion.EmailTemplatesPropertyName] = value;
            }
        }
        #endregion

        #region Setting Property
        /// <summary>
        /// The XML name of the <see cref="Setting"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string SettingPropertyName = "setting";

        /// <summary>
        /// Gets or sets the Setting.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Setting.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.EmailTemplateSecion.SettingPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::SCSCommon.Configuration.Setting Setting
        {
            get
            {
                return ((global::SCSCommon.Configuration.Setting)(base[global::SCSCommon.Configuration.EmailTemplateSecion.SettingPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.EmailTemplateSecion.SettingPropertyName] = value;
            }
        }
        #endregion
    }
}
