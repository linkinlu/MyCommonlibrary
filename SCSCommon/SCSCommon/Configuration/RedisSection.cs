//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


/// <summary>
/// 这个vs插件叫做configuration section manager 可在extension找到并配置!!!!!!!!!!
/// </summary>
namespace SCSCommon.Configuration
{


    /// <summary>
    /// The RedisSection Configuration Section.
    /// </summary>
    public partial class RedisSection : global::System.Configuration.ConfigurationSection
    {

        #region Singleton Instance
        /// <summary>
        /// The XML name of the RedisSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string RedisSectionSectionName = "redisSection";

        /// <summary>
        /// The XML path of the RedisSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string RedisSectionSectionPath = "redisSection";

        /// <summary>
        /// Gets the RedisSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public static global::SCSCommon.Configuration.RedisSection Instance
        {
            get
            {
                return ((global::SCSCommon.Configuration.RedisSection)(global::System.Configuration.ConfigurationManager.GetSection(global::SCSCommon.Configuration.RedisSection.RedisSectionSectionPath)));
            }
        }
        #endregion

        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.RedisSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.RedisSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Redises Property
        /// <summary>
        /// The XML name of the <see cref="Redises"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string RedisesPropertyName = "redises";

        /// <summary>
        /// Gets or sets the Redises.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Redises.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.RedisSection.RedisesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::SCSCommon.Configuration.Redises Redises
        {
            get
            {
                return ((global::SCSCommon.Configuration.Redises)(base[global::SCSCommon.Configuration.RedisSection.RedisesPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.RedisSection.RedisesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SCSCommon.Configuration
{


    /// <summary>
    /// The RedisElement Configuration Element.
    /// </summary>
    public partial class RedisElement : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string NamePropertyName = "name";

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.RedisElement.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.RedisElement.NamePropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.RedisElement.NamePropertyName] = value;
            }
        }
        #endregion

        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ConnectionStringPropertyName = "connectionString";

        /// <summary>
        /// Gets or sets the ConnectionString.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionString.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SCSCommon.Configuration.RedisElement.ConnectionStringPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[global::SCSCommon.Configuration.RedisElement.ConnectionStringPropertyName]));
            }
            set
            {
                base[global::SCSCommon.Configuration.RedisElement.ConnectionStringPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SCSCommon.Configuration
{


    /// <summary>
    /// A collection of RedisElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SCSCommon.Configuration.RedisElement), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = global::SCSCommon.Configuration.Redises.RedisElementPropertyName)]
    public partial class Redises : global::System.Configuration.ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SCSCommon.Configuration.RedisElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string RedisElementPropertyName = "redisElement";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override string ElementName
        {
            get
            {
                return global::SCSCommon.Configuration.Redises.RedisElementPropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SCSCommon.Configuration.Redises.RedisElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SCSCommon.Configuration.RedisElement)(element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="global::SCSCommon.Configuration.RedisElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SCSCommon.Configuration.RedisElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SCSCommon.Configuration.RedisElement();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.RedisElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SCSCommon.Configuration.RedisElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.RedisElement this[int index]
        {
            get
            {
                return ((global::SCSCommon.Configuration.RedisElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.RedisElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SCSCommon.Configuration.RedisElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.RedisElement this[object name]
        {
            get
            {
                return ((global::SCSCommon.Configuration.RedisElement)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SCSCommon.Configuration.RedisElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="redisElement">The <see cref="global::SCSCommon.Configuration.RedisElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Add(global::SCSCommon.Configuration.RedisElement redisElement)
        {
            base.BaseAdd(redisElement);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SCSCommon.Configuration.RedisElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="redisElement">The <see cref="global::SCSCommon.Configuration.RedisElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Remove(global::SCSCommon.Configuration.RedisElement redisElement)
        {
            base.BaseRemove(this.GetElementKey(redisElement));
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.RedisElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SCSCommon.Configuration.RedisElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.RedisElement GetItemAt(int index)
        {
            return ((global::SCSCommon.Configuration.RedisElement)(base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="global::SCSCommon.Configuration.RedisElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SCSCommon.Configuration.RedisElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::SCSCommon.Configuration.RedisElement GetItemByKey(string name)
        {
            return ((global::SCSCommon.Configuration.RedisElement)(base.BaseGet(((object)(name)))));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
